.eqv 	SWITCHES,  0x11000000
.eqv 	SPI_DONE,  0x11000004
.eqv 	SPI_MOSI,  0x11000020
.eqv 	SPI_start, 0x11000008
.eqv 	SWITCHES,  0x11000000
.eqv	CS	,  0x11000024


.data 
	SINE: .word 0x3745,0x375B,0x3771,0x3786,0x379C,
    0x37B2,0x37C7,0x37DD,0x37F2,0x3808,
    0x381D,0x3833,0x3848,0x385E,0x3873,
    0x3889,0x389E,0x38B3,0x38C8,0x38DE,
    0x38F3,0x3908,0x391D,0x3932,0x3947,
    0x395B,0x3970,0x3985,0x3999,0x39AE,
    0x39C2,0x39D6,0x39EB,0x39FF,0x3A13,
    0x3A27,0x3A3B,0x3A4E,0x3A62,0x3A75,
    0x3A89,0x3A9C,0x3AAF,0x3AC2,0x3AD5,
    0x3AE8,0x3AFB,0x3B0D,0x3B20,0x3B32,
    0x3B44,0x3B56,0x3B68,0x3B7A,0x3B8C,
    0x3B9D,0x3BAE,0x3BC0,0x3BD1,0x3BE1,
    0x3BF2,0x3C03,0x3C13,0x3C23,0x3C33,
    0x3C43,0x3C53,0x3C62,0x3C71,0x3C81,
    0x3C90,0x3C9E,0x3CAD,0x3CBB,0x3CCA,
    0x3CD8,0x3CE5,0x3CF3,0x3D00,0x3D0E,
    0x3D1B,0x3D28,0x3D34,0x3D41,0x3D4D,
    0x3D59,0x3D65,0x3D70,0x3D7C,0x3D87,
    0x3D92,0x3D9C,0x3DA7,0x3DB1,0x3DBB,
    0x3DC5,0x3DCF,0x3DD8,0x3DE1,0x3DEA,
    0x3DF3,0x3DFB,0x3E04,0x3E0C,0x3E13,
    0x3E1B,0x3E22,0x3E29,0x3E30,0x3E37,
    0x3E3D,0x3E43,0x3E49,0x3E4E,0x3E54,
    0x3E59,0x3E5E,0x3E62,0x3E67,0x3E6B,
    0x3E6F,0x3E72,0x3E76,0x3E79,0x3E7C,
    0x3E7F,0x3E81,0x3E83,0x3E85,0x3E87,
    0x3E88,0x3E89,0x3E8A,0x3E8B,0x3E8B,
    0x3E8B,0x3E8B,0x3E8B,0x3E8A,0x3E89,
    0x3E88,0x3E87,0x3E85,0x3E83,0x3E81,
    0x3E7F,0x3E7C,0x3E79,0x3E76,0x3E72,
    0x3E6F,0x3E6B,0x3E67,0x3E62,0x3E5E,
    0x3E59,0x3E54,0x3E4E,0x3E49,0x3E43,
    0x3E3D,0x3E37,0x3E30,0x3E29,0x3E22,
    0x3E1B,0x3E13,0x3E0C,0x3E04,0x3DFB,
    0x3DF3,0x3DEA,0x3DE1,0x3DD8,0x3DCF,
    0x3DC5,0x3DBB,0x3DB1,0x3DA7,0x3D9C,
    0x3D92,0x3D87,0x3D7C,0x3D70,0x3D65,
    0x3D59,0x3D4D,0x3D41,0x3D34,0x3D28,
    0x3D1B,0x3D0E,0x3D00,0x3CF3,0x3CE5,
    0x3CD8,0x3CCA,0x3CBB,0x3CAD,0x3C9E,
    0x3C90,0x3C81,0x3C71,0x3C62,0x3C53,
    0x3C43,0x3C33,0x3C23,0x3C13,0x3C03,
    0x3BF2,0x3BE1,0x3BD1,0x3BC0,0x3BAE,
    0x3B9D,0x3B8C,0x3B7A,0x3B68,0x3B56,
    0x3B44,0x3B32,0x3B20,0x3B0D,0x3AFB,
    0x3AE8,0x3AD5,0x3AC2,0x3AAF,0x3A9C,
    0x3A89,0x3A75,0x3A62,0x3A4E,0x3A3B,
    0x3A27,0x3A13,0x39FF,0x39EB,0x39D6,
    0x39C2,0x39AE,0x3999,0x3985,0x3970,
    0x395B,0x3947,0x3932,0x391D,0x3908,
    0x38F3,0x38DE,0x38C8,0x38B3,0x389E,
    0x3889,0x3873,0x385E,0x3848,0x3833,
    0x381D,0x3808,0x37F2,0x37DD,0x37C7,
    0x37B2,0x379C,0x3786,0x3771,0x375B,
    0x3745,0x3730,0x371A,0x3704,0x36EF,
    0x36D9,0x36C3,0x36AE,0x3698,0x3683,
    0x366D,0x3658,0x3642,0x362D,0x3617,
    0x3602,0x35ED,0x35D7,0x35C2,0x35AD,
    0x3598,0x3583,0x356E,0x3559,0x3544,
    0x352F,0x351B,0x3506,0x34F1,0x34DD,
    0x34C9,0x34B4,0x34A0,0x348C,0x3478,
    0x3464,0x3450,0x343C,0x3429,0x3415,
    0x3402,0x33EE,0x33DB,0x33C8,0x33B5,
    0x33A2,0x3390,0x337D,0x336B,0x3358,
    0x3346,0x3334,0x3322,0x3311,0x32FF,
    0x32EE,0x32DC,0x32CB,0x32BA,0x32A9,
    0x3299,0x3288,0x3278,0x3268,0x3258,
    0x3248,0x3238,0x3228,0x3219,0x320A,
    0x31FB,0x31EC,0x31DE,0x31CF,0x31C1,
    0x31B3,0x31A5,0x3198,0x318A,0x317D,
    0x3170,0x3163,0x3156,0x314A,0x313E,
    0x3132,0x3126,0x311A,0x310F,0x3104,
    0x30F9,0x30EE,0x30E4,0x30D9,0x30CF,
    0x30C6,0x30BC,0x30B3,0x30A9,0x30A0,
    0x3098,0x308F,0x3087,0x307F,0x3077,
    0x3070,0x3068,0x3061,0x305B,0x3054,
    0x304E,0x3048,0x3042,0x303C,0x3037,
    0x3032,0x302D,0x3028,0x3024,0x3020,
    0x301C,0x3018,0x3015,0x3012,0x300F,
    0x300C,0x300A,0x3008,0x3006,0x3004,
    0x3003,0x3002,0x3001,0x3000,0x3000,
    0x3000,0x3000,0x3000,0x3001,0x3002,
    0x3003,0x3004,0x3006,0x3008,0x300A,
    0x300C,0x300F,0x3012,0x3015,0x3018,
    0x301C,0x3020,0x3024,0x3028,0x302D,
    0x3032,0x3037,0x303C,0x3042,0x3048,
    0x304E,0x3054,0x305B,0x3061,0x3068,
    0x3070,0x3077,0x307F,0x3087,0x308F,
    0x3098,0x30A0,0x30A9,0x30B3,0x30BC,
    0x30C6,0x30CF,0x30D9,0x30E4,0x30EE,
    0x30F9,0x3104,0x310F,0x311A,0x3126,
    0x3132,0x313E,0x314A,0x3156,0x3163,
    0x3170,0x317D,0x318A,0x3198,0x31A5,
    0x31B3,0x31C1,0x31CF,0x31DE,0x31EC,
    0x31FB,0x320A,0x3219,0x3228,0x3238,
    0x3248,0x3258,0x3268,0x3278,0x3288,
    0x3299,0x32A9,0x32BA,0x32CB,0x32DC,
    0x32EE,0x32FF,0x3311,0x3322,0x3334,
    0x3346,0x3358,0x336B,0x337D,0x3390,
    0x33A2,0x33B5,0x33C8,0x33DB,0x33EE,
    0x3402,0x3415,0x3429,0x343C,0x3450,
    0x3464,0x3478,0x348C,0x34A0,0x34B4,
    0x34C9,0x34DD,0x34F1,0x3506,0x351B,
    0x352F,0x3544,0x3559,0x356E,0x3583,
    0x3598,0x35AD,0x35C2,0x35D7,0x35ED,
    0x3602,0x3617,0x362D,0x3642,0x3658,
    0x366D,0x3683,0x3698,0x36AE,0x36C3,
    0x36D9,0x36EF,0x3704,0x371A,0x3730

.text 
	li	sp, 0x10000	#stackpointer
	li	s0, SWITCHES	#switches on board
	li	s1, SPI_DONE	#signals if a transmission is done
	li	s2, SPI_MOSI	#address for transmit data to be sent to
	li	s3, SPI_start	#signal to start transmisstion
	la	s4, SINE	#address of the Sinewave values
	li	s5, CS		#chip select address
	
	li	t5, 539		#counter limit for loop
	li	t6, 0		#initialize loop counter
	li	a7, 62500	#value for the timer
	
	#set CS high
	li	t3, 1
	sw	t3, 0(s5)
	
	#start at 3V
	li	t4, 1

MAIN:
		#software delay to create frequency needed
		li	a6, 0
DELAY:		addi	a6, a6, 1
		bne	a6,a7, DELAY
		#get value from array
		#lw	a0, 0(s4)
		beqz	t4, LOW		
		li	a0, 0x3E8B
		li	t4, 0
		j	WRITE
		
LOW:		li	a0, 0x3000
		li	t4, 1
		#call DAC_WRITE to send data to correct locations
WRITE:		call	DAC_WRITE
		
		#increment address to read
		addi	s4, s4, 4
		#increment counter
		addi	t6, t6, 1
		
		#loop until counter = 539
		bne	t5, t6, MAIN
		
		#reset loop counter
		li	t6, 0
		#reset address of values to first value
		la	s4, SINE
		#jump back to main to loop forever
	
		j	MAIN
DAC_WRITE:

		#loop and read SPI_DONE address = 0
		#read SPI_DONE address
DONE_LOOP1:	lw	t0, 0(s1)
		#check if done is low and branch if it is high
		beqz	t0, DONE_LOOP1
		#means that the last spi byte sent is done
		
		#set CS low to allow transmission
		li	t3, 0
		sw	t3, 0(s5)	
		#shift right 8 bits to get upper MOSI byte
		srli	t1, a0, 8
		#Put byte into MOSI address
		sw	t1,0(s2)
		#set start high
		li	t2, 1
		sw	t2, 0(s3)
		#wait until done value is low
		#read SPI_DONE value
DONE_LOOP2:	lw	t0, 0(s1)
		beqz	t0, DONE_LOOP2
		#loop checking done every time
	
		#set start to zero
		li	t2, 0
		sw	t2, 0(s3)

		#get lower byte of MOSI data
		andi	t1, a0, 0xFF
		#put MOSI byte into MOSI address
		sw	t1,0(s2)
		#set start to high
		li	t2, 1
		sw	t2, 0(s3)
		#loop checking done value of SPI
		#loop until SPI_DONE is low
DONE_LOOP3:	lw	t0, 0(s1)
		bne	t0, zero, DONE_LOOP3
		#set start to 0
		li	t2, 0
		sw	t2, 0(s3)
		
DONE_LOOP4:	lw	t0, 0(s1)
		beqz	t0, DONE_LOOP4
		#set CS high
		li	t3, 1
		sw	t3, 0(s5)
		#return to main
		ret


